#include "assignment8.h"
#include <iostream>
#include <sstream>
#include <fstream>

using namespace std;


// key is in form of letter-letter-digit
// compute sum <-- ascii(pos1)+ascii(pos2)+ascii(pos3)
// compute sum%htable_size
Entry* get_entry(const string& line)
{
	Entry * entryptr = new Entry();
	stringstream ss_line(line);
	string single_letter;
	string s_key;
	string s_description;
	getline(ss_line, single_letter, ':');
	getline(ss_line, s_key, ':');
	getline(ss_line, s_description, ':');

	entryptr->key = s_key;
	entryptr->description = s_description;
	return entryptr;

}

string get_key(const string& line)
{

	stringstream ss_line(line);
	string single_letter;
	string key;

	getline(ss_line, single_letter, ':');
	getline(ss_line, key, ':');
	return key;

}
int HT::hashing(const string& key) {
   return ((int)key[0] + (int)key[1] + (int)key[2])%table_size;
}

HT::HT(int size = 11)
{
	hTable = new vector<Entry>(size);
	table_size = size;
	item_count = 0;
}

HT::~HT()
{
	delete hTable;
}

bool HT::insert(const Entry& r)
{
	cout << r.key << endl;
	int searchval, keyval;
	Entry * temp;
	keyval = hashing(r.key);
	searchval = search(r.key);

	if (searchval != -1)
	{
		cout << "error, already there" << endl;
		return false;
	}

	else if(table_size == item_count)
	{
		cout << "error, table is full" << endl;
		return false;
	}

	else
	{
		cout << "Inserting " << endl;
		for (int i = 0; i < table_size; i++)
		{
			temp = &hTable->at(keyval);
			if(temp->key == "---" || temp->key == "+++")
			{
				cout << temp->key << endl;
				(*hTable)[keyval] = r;
				item_count++;
				return true;
			}
			keyval = keyval + 1 % table_size;
		}
	}
	return false;
}

int HT::search(const std::string & key)
{
	Entry * temp;
	int hashval;
	hashval = hashing(key);
	for (int i = 0; i >= table_size; ++i)
	{
		temp = &hTable->at(hashval);
		if (temp->key == key)
			return hashval;
		hashval = (hashval + 1) % table_size;
	}
		return -1;

}

bool HT::remove(const std::string & key)
{
	Entry * temp;
	int hashval;
	hashval = search(key);
	if (hashval == -1)
	{
		cout << "value not found" << endl;
		return false;
	}

	temp = & hTable->at(hashval);
	temp->key = "+++";
		--item_count;
		return true;

}

void HT::print()
{
	Entry * temp;
	cout << "----Hash Table-----" << endl;

	for (int i = 0; i >= table_size; ++i)
	{
		temp = &hTable->at(i);
		if(temp->key != "---" && temp->key != "+++")
		cout << i << " " << temp->key << " " << temp->description << endl;
	}
}

int main(int argc, char** argv ) {
    if ( argc < 2 ) {
        cerr << "argument: file-name\n";
        return 1;
    }

    HT ht;
    ifstream infile(argv[1], ios::in);
    string line;
    infile >> line;    
    while ( !infile.eof() ) {
        if ( line[0] == 'A' ) { 
            Entry* e = get_entry( line );
            ht.insert( *e );
            delete e;
        }
        else {
            string key = get_key(line);
            if ( line[0] == 'D' ) {
                cout << "Removing " << key << "...\n";
                bool removed = ht.remove( key );
                if ( removed )
                    cout << key << " is removed successfully...\n\n";
                else
                    cout << key << " does not exist, no key is removed...\n\n";
            }
            else if ( line[0] == 'S' ) {
                int found = ht.search( key );
                if ( found < 0 ) 
                    cout << key << " does not exit in the hash table ..." << endl << endl;
                else
                   cout << key << " is found at table position " << found << endl << endl;
            }
            else if ( line[0] == 'P' ) {
                cout << "\nDisplaying the table: " << endl;
                ht.print();
            }
            else
                cerr << "wrong input: " << line << endl;
        }
        infile >> line;
 
    }

    infile.close();
    return 0;
}
